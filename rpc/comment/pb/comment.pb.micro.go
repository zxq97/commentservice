// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/comment/comment.proto

package comment_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CommentServer service

type CommentServerService interface {
	GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...client.CallOption) (*GetCommentListResponse, error)
	PublishComment(ctx context.Context, in *PublishCommentRequest, opts ...client.CallOption) (*EmptyResponse, error)
	DeleteComment(ctx context.Context, in *PublishCommentRequest, opts ...client.CallOption) (*EmptyResponse, error)
	GetCommentCount(ctx context.Context, in *GetCountRequest, opts ...client.CallOption) (*GetCountResponse, error)
	GetLikeCount(ctx context.Context, in *GetCountRequest, opts ...client.CallOption) (*GetCountResponse, error)
	GetLikeState(ctx context.Context, in *GetLikeStateRequest, opts ...client.CallOption) (*GetLikeStateResponse, error)
	LikePoint(ctx context.Context, in *LikePointRequest, opts ...client.CallOption) (*EmptyResponse, error)
	CancelLike(ctx context.Context, in *LikePointRequest, opts ...client.CallOption) (*EmptyResponse, error)
}

type commentServerService struct {
	c    client.Client
	name string
}

func NewCommentServerService(name string, c client.Client) CommentServerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "comment"
	}
	return &commentServerService{
		c:    c,
		name: name,
	}
}

func (c *commentServerService) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...client.CallOption) (*GetCommentListResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.GetCommentList", in)
	out := new(GetCommentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServerService) PublishComment(ctx context.Context, in *PublishCommentRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.PublishComment", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServerService) DeleteComment(ctx context.Context, in *PublishCommentRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.DeleteComment", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServerService) GetCommentCount(ctx context.Context, in *GetCountRequest, opts ...client.CallOption) (*GetCountResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.GetCommentCount", in)
	out := new(GetCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServerService) GetLikeCount(ctx context.Context, in *GetCountRequest, opts ...client.CallOption) (*GetCountResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.GetLikeCount", in)
	out := new(GetCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServerService) GetLikeState(ctx context.Context, in *GetLikeStateRequest, opts ...client.CallOption) (*GetLikeStateResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.GetLikeState", in)
	out := new(GetLikeStateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServerService) LikePoint(ctx context.Context, in *LikePointRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.LikePoint", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServerService) CancelLike(ctx context.Context, in *LikePointRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "CommentServer.CancelLike", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentServer service

type CommentServerHandler interface {
	GetCommentList(context.Context, *GetCommentListRequest, *GetCommentListResponse) error
	PublishComment(context.Context, *PublishCommentRequest, *EmptyResponse) error
	DeleteComment(context.Context, *PublishCommentRequest, *EmptyResponse) error
	GetCommentCount(context.Context, *GetCountRequest, *GetCountResponse) error
	GetLikeCount(context.Context, *GetCountRequest, *GetCountResponse) error
	GetLikeState(context.Context, *GetLikeStateRequest, *GetLikeStateResponse) error
	LikePoint(context.Context, *LikePointRequest, *EmptyResponse) error
	CancelLike(context.Context, *LikePointRequest, *EmptyResponse) error
}

func RegisterCommentServerHandler(s server.Server, hdlr CommentServerHandler, opts ...server.HandlerOption) error {
	type commentServer interface {
		GetCommentList(ctx context.Context, in *GetCommentListRequest, out *GetCommentListResponse) error
		PublishComment(ctx context.Context, in *PublishCommentRequest, out *EmptyResponse) error
		DeleteComment(ctx context.Context, in *PublishCommentRequest, out *EmptyResponse) error
		GetCommentCount(ctx context.Context, in *GetCountRequest, out *GetCountResponse) error
		GetLikeCount(ctx context.Context, in *GetCountRequest, out *GetCountResponse) error
		GetLikeState(ctx context.Context, in *GetLikeStateRequest, out *GetLikeStateResponse) error
		LikePoint(ctx context.Context, in *LikePointRequest, out *EmptyResponse) error
		CancelLike(ctx context.Context, in *LikePointRequest, out *EmptyResponse) error
	}
	type CommentServer struct {
		commentServer
	}
	h := &commentServerHandler{hdlr}
	return s.Handle(s.NewHandler(&CommentServer{h}, opts...))
}

type commentServerHandler struct {
	CommentServerHandler
}

func (h *commentServerHandler) GetCommentList(ctx context.Context, in *GetCommentListRequest, out *GetCommentListResponse) error {
	return h.CommentServerHandler.GetCommentList(ctx, in, out)
}

func (h *commentServerHandler) PublishComment(ctx context.Context, in *PublishCommentRequest, out *EmptyResponse) error {
	return h.CommentServerHandler.PublishComment(ctx, in, out)
}

func (h *commentServerHandler) DeleteComment(ctx context.Context, in *PublishCommentRequest, out *EmptyResponse) error {
	return h.CommentServerHandler.DeleteComment(ctx, in, out)
}

func (h *commentServerHandler) GetCommentCount(ctx context.Context, in *GetCountRequest, out *GetCountResponse) error {
	return h.CommentServerHandler.GetCommentCount(ctx, in, out)
}

func (h *commentServerHandler) GetLikeCount(ctx context.Context, in *GetCountRequest, out *GetCountResponse) error {
	return h.CommentServerHandler.GetLikeCount(ctx, in, out)
}

func (h *commentServerHandler) GetLikeState(ctx context.Context, in *GetLikeStateRequest, out *GetLikeStateResponse) error {
	return h.CommentServerHandler.GetLikeState(ctx, in, out)
}

func (h *commentServerHandler) LikePoint(ctx context.Context, in *LikePointRequest, out *EmptyResponse) error {
	return h.CommentServerHandler.LikePoint(ctx, in, out)
}

func (h *commentServerHandler) CancelLike(ctx context.Context, in *LikePointRequest, out *EmptyResponse) error {
	return h.CommentServerHandler.CancelLike(ctx, in, out)
}
